{"version":3,"file":"selecto.cjs.js","sources":["../src/react-selecto/consts.ts","../src/react-selecto/Selecto.tsx"],"sourcesContent":["import { EVENTS } from \"selecto\";\nimport { camelize } from \"@daybrush/utils\";\n\nexport const REACT_EVENTS =  EVENTS.map(name => camelize(`on ${name}`));\n","import * as React from \"react\";\nimport VanillaSelecto, {\n    CLASS_NAME,\n    OPTIONS,\n    SelectoOptions,\n    PROPERTIES,\n    SelectoProperties,\n    EVENTS,\n    SelectoMethods,\n    METHODS,\n} from \"selecto\";\nimport { ref, MethodInterface, withMethods } from \"framework-utils\";\nimport { SelectoProps } from \"./types\";\nimport { REACT_EVENTS } from \"./consts\";\n\nexport default class Selecto extends React.PureComponent<Partial<SelectoProps>> {\n    @withMethods(METHODS as any)\n    private selecto!: VanillaSelecto;\n    private selectionElement!: HTMLElement;\n    public render() {\n        return <div className={CLASS_NAME} ref={ref(this, \"selectionElement\")}></div>;\n    }\n    public componentDidMount() {\n        const props = this.props;\n        const options: Partial<SelectoOptions> = {};\n\n        OPTIONS.forEach(name => {\n            if (name in props) {\n                (options as any)[name] = props[name];\n            }\n        });\n        this.selecto = new VanillaSelecto({\n            ...options,\n            target: this.selectionElement,\n        });\n\n        EVENTS.forEach((name, i) => {\n            this.selecto.on(name, (e: any) => {\n                const selfProps = this.props as any;\n                const result = selfProps[REACT_EVENTS[i]] && selfProps[REACT_EVENTS[i]](e);\n\n                if (result === false) {\n                    e.stop();\n                }\n            });\n        });\n    }\n    public componentDidUpdate(prevProps: Partial<SelectoProperties>) {\n        const props = this.props;\n        const selecto = this.selecto;\n\n        PROPERTIES.forEach(name => {\n            if (prevProps[name] !== props[name]) {\n                (selecto as any)[name] = props[name];\n            }\n        });\n    }\n    public componentWillUnmount() {\n        this.selecto.destroy();\n    }\n}\nexport default interface Selecto extends MethodInterface<SelectoMethods, VanillaSelecto, Selecto> {}\n"],"names":["REACT_EVENTS","EVENTS","map","name","camelize","__extends","React","className","CLASS_NAME","ref","props","options","OPTIONS","forEach","selecto","VanillaSelecto","target","selectionElement","i","_this","on","e","selfProps","result","stop","prevProps","PROPERTIES","destroy","__decorate","withMethods","METHODS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGO,IAAMA,YAAY,GAAIC,qBAAM,CAACC,GAAP,CAAW,UAAAC,IAAA;SAAQC,cAAQ,CAAC,QAAMD,IAAP,CAAR;CAAnB,CAAtB;;ACYP;;;EAAqCE,0BAAA;;kBAArC;;;;;;gBAIW,GAAP;WACWC,mBAAA,MAAA;MAAKC,SAAS,EAAEC;MAAYC,GAAG,EAAEA,kBAAG,CAAC,IAAD,EAAO,kBAAP;KAApC,CAAP;GADG;;2BAGA,GAAP;oBAAA;;QACUC,KAAK,GAAG,KAAKA,KAAnB;QACMC,OAAO,GAA4B,EAAzC;IAEAC,sBAAO,CAACC,OAAR,CAAgB,UAAAV,IAAA;UACRA,IAAI,IAAIO,KAAZ,EAAmB;QACdC,OAAe,CAACR,IAAD,CAAf,GAAwBO,KAAK,CAACP,IAAD,CAA7B;;KAFT;SAKKW,OAAL,GAAe,IAAIC,cAAJ,uBACRJ;MACHK,MAAM,EAAE,KAAKC;MAFF,CAAf;IAKAhB,qBAAM,CAACY,OAAP,CAAe,UAACV,IAAD,EAAOe,CAAP;MACXC,KAAI,CAACL,OAAL,CAAaM,EAAb,CAAgBjB,IAAhB,EAAsB,UAACkB,CAAD;YACZC,SAAS,GAAGH,KAAI,CAACT,KAAvB;YACMa,MAAM,GAAGD,SAAS,CAACtB,YAAY,CAACkB,CAAD,CAAb,CAAT,IAA8BI,SAAS,CAACtB,YAAY,CAACkB,CAAD,CAAb,CAAT,CAA2BG,CAA3B,CAA7C;;YAEIE,MAAM,KAAK,KAAf,EAAsB;UAClBF,CAAC,CAACG,IAAF;;OALR;KADJ;GAdG;;4BAyBA,GAAP,UAA0BC,SAA1B;QACUf,KAAK,GAAG,KAAKA,KAAnB;QACMI,OAAO,GAAG,KAAKA,OAArB;IAEAY,yBAAU,CAACb,OAAX,CAAmB,UAAAV,IAAA;UACXsB,SAAS,CAACtB,IAAD,CAAT,KAAoBO,KAAK,CAACP,IAAD,CAA7B,EAAqC;QAChCW,OAAe,CAACX,IAAD,CAAf,GAAwBO,KAAK,CAACP,IAAD,CAA7B;;KAFT;GAJG;;8BAUA,GAAP;SACSW,OAAL,CAAaa,OAAb;GADG;;EAxCPC,YADCC,0BAAW,CAACC,sBAAD,yCACZ;;gBA2CJ;EA7CqCxB,oBAArC;;;;"}