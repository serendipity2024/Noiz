import { DataProvider } from 'ra-core';
import { ApolloClient, ApolloClientOptions, ApolloQueryResult, MutationOptions, WatchQueryOptions, QueryOptions, OperationVariables } from '@apollo/client';
import { IntrospectionOptions, IntrospectionResult } from './introspection';
export * from './introspection';
export declare const QUERY_TYPES: string[];
export declare const MUTATION_TYPES: string[];
export declare const ALL_TYPES: string[];
export type BuildQueryResult = QueryOptions<OperationVariables, any> & {
    parseResponse: (response: ApolloQueryResult<any>) => any;
};
export type BuildQuery = (name: string, resource: string, params: any) => BuildQueryResult;
export type BuildQueryFactory = (introspectionResults: IntrospectionResult) => BuildQuery;
export type GetQueryOptions = (resource: string, raFetchMethod: string) => Partial<QueryOptions<OperationVariables, any>>;
export type GetMutationOptions = (resource: string, raFetchMethod: string) => Partial<MutationOptions<OperationVariables, any>>;
export type GetWatchQueryOptions = (resource: string, raFetchMethod: string) => Partial<WatchQueryOptions<OperationVariables, any>>;
export type Options = {
    client?: ApolloClient<unknown>;
    clientOptions?: Partial<ApolloClientOptions<unknown>>;
    introspection?: false | Partial<IntrospectionOptions>;
    override?: {
        [key: string]: (params: any) => BuildQueryResult;
    };
    buildQuery: BuildQueryFactory;
    query?: GetQueryOptions;
    mutation?: GetMutationOptions;
    watchQuery?: GetWatchQueryOptions;
};
declare const buildGraphQLProvider: (options: Options) => Promise<DataProvider>;
export default buildGraphQLProvider;
//# sourceMappingURL=index.d.ts.map