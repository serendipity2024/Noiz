!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("ra-data-hasura",[],r):"object"==typeof exports?exports["ra-data-hasura"]=r():e["ra-data-hasura"]=r()}("undefined"!=typeof self?self:this,(function(){return function(e){var r={};function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}return a.m=e,a.c=r,a.d=function(e,r,t){a.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,r){if(1&r&&(e=a(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)a.d(t,n,function(r){return e[r]}.bind(null,n));return t},a.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(r,"a",r),r},a.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},a.p="",a(a.s=0)}([function(e,r,a){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var t=a(1);var n=function(e){return JSON.parse(JSON.stringify(e))};r.default=function(e,r,a){var s=function(e){var r="id";return a&&a.primaryKey[e]&&(r=a.primaryKey[e]),r},u=function(e,r){if(!r)return e;var a=Object.keys(r);if(0===a.length)return e;var t=Object.assign(e);return a.forEach((function(e){t[e]=r[e]})),t},i=function(e,r,a){var i={},o={},c=function(e){var r,a;if(e&&1===e.split(".").length)a="public",r=e;else{if(!e||2!==e.split(".").length)throw new Error(JSON.stringify({error:"Invalid table/schema resource"}));var t=e.split(".");a=t[0],r=t[1]}return{schema:a,tableName:r}}(r),g=c.schema,l=c.tableName,d=s(r),f={};void 0!==a.data&&Object.keys(a.data).forEach((function(e){"id"!==e&&(f[e]=a.data[e])}));var h,p,y,b=Object.keys(f);switch(b.push(d),void 0!==a.sort&&"id"===a.sort.field&&(a.sort.field=d),e){case"GET_LIST":var m=n(t.selectQuery),w=n(t.countQuery);m.args.table={name:l,schema:g},m.args.limit=a.pagination.perPage,m.args.offset=a.pagination.page*a.pagination.perPage-a.pagination.perPage,m.args.where=a.filter,m.args.order_by={column:a.sort.field,type:void 0===a.sort.order?"asc":a.sort.order.toLowerCase()},w.args.table={name:l,schema:g},w.args.where={},w.args.where[d]={$ne:null},w.args.where=u(w.args.where,a.filter),(o=n(t.bulkQuery)).args.push(m),o.args.push(w);break;case"GET_ONE":(o=n(t.selectQuery)).args.table={name:l,schema:g},o.args.where={},o.args.where[d]={$eq:a.id};break;case"CREATE":(o=n(t.insertQuery)).args.table={name:l,schema:g},o.args.objects.push(f),o.args.returning=b;break;case"UPDATE":(o=n(t.updateQuery)).args.table={name:l,schema:g},o.args.$set=f,o.args.where={},o.args.where[d]={$eq:a.id},o.args.returning=b;break;case"UPDATE_MANY":(o=n(t.updateQuery)).args.table={name:l,schema:g},o.args.$set=f,o.args.where={},o.args.where[d]={$in:a.ids},o.args.returning=b;break;case"DELETE":var E=Object.keys(a.previousData);"id"!==d&&(E=E.filter((function(e){return"id"!==e}))),(o=n(t.deleteQuery)).args.table={name:l,schema:g},o.args.where={},o.args.where[d]={$eq:a.id},E.push(d),o.args.returning=E;break;case"DELETE_MANY":(o=n(t.deleteQuery)).args.table={name:l,schema:g},o.args.where={},o.args.where[d]={$in:a.ids},o.args.returning=[d];break;case"GET_MANY":var v=n(t.selectQuery),Q=n(t.countQuery);v.args.table={name:l,schema:g},v.args.where={},v.args.where[d]={$in:a.ids},v.args.where=u(v.args.where,a.filter),Q.args.table={name:l,schema:g},Q.args.where={},Q.args.where[d]={$ne:null},Q.args.where=u(Q.args.where,a.filter),(o=n(t.bulkQuery)).args.push(v),o.args.push(Q);break;case"GET_MANY_REFERENCE":var _=n(t.selectQuery),O=n(t.countQuery);_.args.table={name:l,schema:g},_.args.limit=a.pagination.perPage,_.args.offset=a.pagination.page*a.pagination.perPage-a.pagination.perPage,_.args.where=(h={},p=a.target,y=a.id,p in h?Object.defineProperty(h,p,{value:y,enumerable:!0,configurable:!0,writable:!0}):h[p]=y,h),_.args.where=u(_.args.where,a.filter),_.args.order_by={column:a.sort.field,type:void 0===a.sort.order?"asc":a.sort.order.toLowerCase()},O.args.table={name:l,schema:g},O.args.where={},O.args.where[d]={$ne:null},O.args.where=u(_.args.where,a.filter),(o=n(t.bulkQuery)).args.push(_),o.args.push(O);break;default:throw new Error("Unsupported type ".concat(e))}return i.body=JSON.stringify(o),{options:i}},o=function(e,r,a,t){if("error"in e||"code"in e)throw new Error(JSON.stringify(e));var n=s(a),u=e;switch("returning"in e&&(u=e.returning),"id"!==n&&(Array.isArray(e[0])?u[0].forEach((function(e){e.id=e[n]})):u[0].id=u[0][n]),r){case"GET_LIST":return{data:e[0],total:e[1].count};case"GET_ONE":return{data:e[0]};case"CREATE":case"UPDATE":return{data:e.returning[0]};case"UPDATE_MANY":return{data:e.returning.map((function(e){return e.id}))};case"DELETE":return{data:e.returning[0]};case"DELETE_MANY":return{data:e.returning.map((function(e){return e.id}))};case"GET_MANY":return{data:e[0]};case"GET_MANY_REFERENCE":return{data:e[0],total:e[1].count};default:return{data:e}}};return function(a,t,n){var s=i(a,t,n).options;return s.method="POST","function"==typeof r?r(e+"/v1/query",s).then((function(e){return o(e.json,a,t)})):(s.headers=r,fetch(e+"/v1/query",s).then((function(e){return e.json().then((function(e){return o(e,a,t)}))})))}},e.exports=r.default},function(e,r,a){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.deleteQuery=r.updateQuery=r.insertQuery=r.countQuery=r.selectQuery=r.bulkQuery=void 0;r.bulkQuery={type:"bulk",args:[]};r.selectQuery={type:"select",args:{table:{schema:"",name:""},columns:["*"]}};r.countQuery={type:"count",args:{table:{schema:"",name:""},where:{}}};r.insertQuery={type:"insert",args:{table:{schema:"",name:""},objects:[],returning:[]}};r.updateQuery={type:"update",args:{table:{schema:"",name:""},$set:{},where:{},returning:[]}};r.deleteQuery={type:"delete",args:{table:{schema:"",name:""},$set:{},where:{},returning:[]}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,