(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ra-data-hasura", [], factory);
	else if(typeof exports === 'object')
		exports["ra-data-hasura"] = factory();
	else
		root["ra-data-hasura"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _queries = __webpack_require__(/*! ./queries */ "./src/queries.js");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_PRIMARY_KEY = 'id';

var cloneQuery = function cloneQuery(query) {
  return JSON.parse(JSON.stringify(query));
};

var _default = function _default(serverEndpoint, httpClient, config) {
  var getTableSchema = function getTableSchema(resource) {
    var tableName;
    var schema; // parse schema in resource

    if (resource && resource.split('.').length === 1) {
      schema = 'public';
      tableName = resource;
    } else if (resource && resource.split('.').length === 2) {
      var resourceSplit = resource.split('.');
      schema = resourceSplit[0];
      tableName = resourceSplit[1];
    } else {
      throw new Error(JSON.stringify({
        'error': 'Invalid table/schema resource'
      }));
    }

    return {
      schema: schema,
      tableName: tableName
    };
  };

  var getPrimaryKey = function getPrimaryKey(resource) {
    var primaryKey = DEFAULT_PRIMARY_KEY;

    if (config && config['primaryKey'][resource]) {
      primaryKey = config['primaryKey'][resource];
    }

    return primaryKey;
  };

  var addFilters = function addFilters(where, filter) {
    if (!filter) return where;
    var filterKeys = Object.keys(filter);
    if (filterKeys.length === 0) return where;
    var whereCopy = Object.assign(where);
    filterKeys.forEach(function (key) {
      whereCopy[key] = filter[key];
    });
    return whereCopy;
  };

  var convertDataRequestToHTTP = function convertDataRequestToHTTP(type, resource, params) {
    var options = {};
    var finalQuery = {};
    var tableSchema = getTableSchema(resource);
    var schema = tableSchema.schema,
        tableName = tableSchema.tableName;
    var primaryKey = getPrimaryKey(resource);
    var filteredData = {};

    if (params.data !== undefined) {
      Object.keys(params.data).forEach(function (field) {
        if (field !== DEFAULT_PRIMARY_KEY) {
          filteredData[field] = params.data[field];
        }
      });
    }

    var filteredKeys = Object.keys(filteredData);
    filteredKeys.push(primaryKey);

    if (params.sort !== undefined && params.sort.field === DEFAULT_PRIMARY_KEY) {
      params.sort.field = primaryKey;
    }

    switch (type) {
      case 'GET_LIST':
        // select multiple
        var finalSelectQuery = cloneQuery(_queries.selectQuery);
        var finalCountQuery = cloneQuery(_queries.countQuery);
        finalSelectQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalSelectQuery.args.limit = params.pagination.perPage;
        finalSelectQuery.args.offset = params.pagination.page * params.pagination.perPage - params.pagination.perPage;
        finalSelectQuery.args.where = params.filter;
        finalSelectQuery.args.order_by = {
          column: params.sort.field,
          type: typeof params.sort.order === 'undefined' ? 'asc' : params.sort.order.toLowerCase()
        };
        finalCountQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        ;
        finalCountQuery.args.where = {};
        finalCountQuery.args.where[primaryKey] = {
          '$ne': null
        };
        finalCountQuery.args.where = addFilters(finalCountQuery.args.where, params.filter);
        finalQuery = cloneQuery(_queries.bulkQuery);
        finalQuery.args.push(finalSelectQuery);
        finalQuery.args.push(finalCountQuery);
        break;

      case 'GET_ONE':
        // select one
        finalQuery = cloneQuery(_queries.selectQuery);
        finalQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalQuery.args.where = {};
        finalQuery.args.where[primaryKey] = {
          '$eq': params.id
        };
        break;

      case 'CREATE':
        // create one
        finalQuery = cloneQuery(_queries.insertQuery);
        finalQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalQuery.args.objects.push(filteredData);
        finalQuery.args.returning = filteredKeys;
        break;

      case 'UPDATE':
        // update one
        finalQuery = cloneQuery(_queries.updateQuery);
        finalQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalQuery.args['$set'] = filteredData;
        finalQuery.args.where = {};
        finalQuery.args.where[primaryKey] = {
          '$eq': params.id
        };
        finalQuery.args.returning = filteredKeys;
        break;

      case 'UPDATE_MANY':
        // update multiple ids with given data
        finalQuery = cloneQuery(_queries.updateQuery);
        finalQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalQuery.args['$set'] = filteredData;
        finalQuery.args.where = {};
        finalQuery.args.where[primaryKey] = {
          '$in': params.ids
        };
        finalQuery.args.returning = filteredKeys;
        break;

      case 'DELETE':
        // delete one
        var deleteFields = Object.keys(params.previousData);

        if (primaryKey !== DEFAULT_PRIMARY_KEY) {
          deleteFields = deleteFields.filter(function (field) {
            return field !== DEFAULT_PRIMARY_KEY;
          });
        }

        finalQuery = cloneQuery(_queries.deleteQuery);
        finalQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalQuery.args.where = {};
        finalQuery.args.where[primaryKey] = {
          '$eq': params.id
        };
        deleteFields.push(primaryKey);
        finalQuery.args.returning = deleteFields;
        break;

      case 'DELETE_MANY':
        // delete multiple
        finalQuery = cloneQuery(_queries.deleteQuery);
        finalQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalQuery.args.where = {};
        finalQuery.args.where[primaryKey] = {
          '$in': params.ids
        };
        finalQuery.args.returning = [primaryKey];
        break;

      case 'GET_MANY':
        // select multiple within where clause
        var finalManyQuery = cloneQuery(_queries.selectQuery);
        var finalManyCountQuery = cloneQuery(_queries.countQuery);
        finalManyQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalManyQuery.args.where = {};
        finalManyQuery.args.where[primaryKey] = {
          '$in': params.ids
        };
        finalManyQuery.args.where = addFilters(finalManyQuery.args.where, params.filter);
        finalManyCountQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        ;
        finalManyCountQuery.args.where = {};
        finalManyCountQuery.args.where[primaryKey] = {
          '$ne': null
        };
        finalManyCountQuery.args.where = addFilters(finalManyCountQuery.args.where, params.filter);
        finalQuery = cloneQuery(_queries.bulkQuery);
        finalQuery.args.push(finalManyQuery);
        finalQuery.args.push(finalManyCountQuery);
        break;

      case 'GET_MANY_REFERENCE':
        // select multiple with relations
        var finalManyRefQuery = cloneQuery(_queries.selectQuery);
        var finalManyRefCountQuery = cloneQuery(_queries.countQuery);
        finalManyRefQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        finalManyRefQuery.args.limit = params.pagination.perPage;
        finalManyRefQuery.args.offset = params.pagination.page * params.pagination.perPage - params.pagination.perPage;
        finalManyRefQuery.args.where = _defineProperty({}, params.target, params.id);
        finalManyRefQuery.args.where = addFilters(finalManyRefQuery.args.where, params.filter);
        finalManyRefQuery.args.order_by = {
          column: params.sort.field,
          type: typeof params.sort.order === 'undefined' ? 'asc' : params.sort.order.toLowerCase()
        };
        finalManyRefCountQuery.args.table = {
          'name': tableName,
          'schema': schema
        };
        ;
        finalManyRefCountQuery.args.where = {};
        finalManyRefCountQuery.args.where[primaryKey] = {
          '$ne': null
        };
        finalManyRefCountQuery.args.where = addFilters(finalManyRefQuery.args.where, params.filter);
        finalQuery = cloneQuery(_queries.bulkQuery);
        finalQuery.args.push(finalManyRefQuery);
        finalQuery.args.push(finalManyRefCountQuery);
        break;

      default:
        throw new Error("Unsupported type ".concat(type));
    }

    ;
    options.body = JSON.stringify(finalQuery);
    return {
      options: options
    };
  };

  var convertHTTPResponse = function convertHTTPResponse(response, type, resource, params) {
    // handle errors and throw with the message
    if ('error' in response || 'code' in response) {
      throw new Error(JSON.stringify(response));
    }

    var primaryKey = getPrimaryKey(resource);
    var returnedResponse = response;

    if ('returning' in response) {
      returnedResponse = response.returning;
    }

    if (primaryKey !== DEFAULT_PRIMARY_KEY) {
      if (Array.isArray(response[0])) {
        returnedResponse[0].forEach(function (res) {
          res[DEFAULT_PRIMARY_KEY] = res[primaryKey];
        });
      } else {
        returnedResponse[0][DEFAULT_PRIMARY_KEY] = returnedResponse[0][primaryKey];
      }
    }

    switch (type) {
      case 'GET_LIST':
        return {
          data: response[0],
          total: response[1]['count']
        };

      case 'GET_ONE':
        return {
          data: response[0]
        };

      case 'CREATE':
        return {
          data: response.returning[0]
        };

      case 'UPDATE':
        return {
          data: response.returning[0]
        };

      case 'UPDATE_MANY':
        var updatedIds = response.returning.map(function (item) {
          return item.id;
        });
        return {
          data: updatedIds
        };

      case 'DELETE':
        return {
          data: response.returning[0]
        };

      case 'DELETE_MANY':
        var deletedIds = response.returning.map(function (item) {
          return item.id;
        });
        return {
          data: deletedIds
        };

      case 'GET_MANY':
        return {
          data: response[0]
        };

      case 'GET_MANY_REFERENCE':
        return {
          data: response[0],
          total: response[1].count
        };

      default:
        return {
          data: response
        };
    }
  };

  return function (type, resource, params) {
    var _convertDataRequestTo = convertDataRequestToHTTP(type, resource, params),
        options = _convertDataRequestTo.options;

    options.method = 'POST';

    if (typeof httpClient === 'function') {
      // support httpClient argument
      return httpClient(serverEndpoint + '/v1/query', options).then(function (response) {
        return convertHTTPResponse(response.json, type, resource, params);
      });
    }

    options.headers = httpClient; // backwards compatible static header object

    return fetch(serverEndpoint + '/v1/query', options).then(function (response) {
      return response.json().then(function (data) {
        return convertHTTPResponse(data, type, resource, params);
      });
    });
  };
};

exports.default = _default;
module.exports = exports["default"];

/***/ }),

/***/ "./src/queries.js":
/*!************************!*\
  !*** ./src/queries.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteQuery = exports.updateQuery = exports.insertQuery = exports.countQuery = exports.selectQuery = exports.bulkQuery = void 0;
// define hasura json api queries
var bulkQuery = {
  type: 'bulk',
  args: []
};
exports.bulkQuery = bulkQuery;
var selectQuery = {
  type: 'select',
  args: {
    table: {
      'schema': '',
      'name': ''
    },
    columns: ['*']
  }
};
exports.selectQuery = selectQuery;
var countQuery = {
  type: 'count',
  args: {
    table: {
      'schema': '',
      'name': ''
    },
    where: {}
  }
};
exports.countQuery = countQuery;
var insertQuery = {
  type: 'insert',
  args: {
    table: {
      'schema': '',
      'name': ''
    },
    objects: [],
    returning: []
  }
};
exports.insertQuery = insertQuery;
var updateQuery = {
  type: 'update',
  args: {
    table: {
      'schema': '',
      'name': ''
    },
    $set: {},
    where: {},
    returning: []
  }
};
exports.updateQuery = updateQuery;
var deleteQuery = {
  type: 'delete',
  args: {
    table: {
      'schema': '',
      'name': ''
    },
    $set: {},
    where: {},
    returning: []
  }
};
exports.deleteQuery = deleteQuery;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,